# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Android.gitlab-ci.yml

# Read more about this script on this blog post https://about.gitlab.com/2018/10/24/setting-up-gitlab-ci-for-android-projects/
# If you are interested in using Android with FastLane for publishing take a look at the Android-Fastlane template.

image: openjdk:11-jdk

variables:

  # ANDROID_COMPILE_SDK is the version of Android you're compiling with.
  # It should match compileSdkVersion.
  ANDROID_COMPILE_SDK: "33"

  # ANDROID_BUILD_TOOLS is the version of the Android build tools you are using.
  # It should match buildToolsVersion.
  ANDROID_BUILD_TOOLS: "33.0.0"

  # It's what version of the command line tools we're going to download from the official site.
  # Official Site-> https://developer.android.com/studio/index.html
  # There, look down below at the cli tools only, sdk tools package is of format:
  #        commandlinetools-os_type-ANDROID_SDK_TOOLS_latest.zip
  # when the script was last modified for latest compileSdkVersion, it was which is written down below
  ANDROID_SDK_TOOLS: "6514223"

  SSH_PRIVATE_KEY: |
    -----BEGIN OPENSSH PRIVATE KEY-----
    b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW
    QyNTUxOQAAACBMpHASe+6+nNqvBTizt+F5liA9fF3lbAiz8MDdjphpugAAAKCGs52ZhrOd
    mQAAAAtzc2gtZWQyNTUxOQAAACBMpHASe+6+nNqvBTizt+F5liA9fF3lbAiz8MDdjphpug
    AAAECE5gDuOSZO7VZipEsAMoSwxV1UOv4HI1tRqCUdZTrpdEykcBJ77r6c2q8FOLO34XmW
    ID18XeVsCLPwwN2OmGm6AAAAG2dpb3Zhbm5pLnBldGl0bzg4QGdtYWlsLmNvbQEC
    -----END OPENSSH PRIVATE KEY-----

# Packages installation before running script
before_script:
  - source ./scripts/config.sh

  - apt-get --quiet update --yes
  - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1

  # Setup path as android_home for moving/exporting the downloaded sdk into it
  - export ANDROID_HOME="${PWD}/android-home"
  # Create a new directory at specified location
  - install -d $ANDROID_HOME
  # Here we are installing androidSDK tools from official source, (the key thing here is the url from
  # where you are downloading these sdk tool for command line, so please do note this url pattern there
  # and here as well) after that unzipping those tools and then running a series of SDK manager commands
  # to install necessary android SDK packages that'll allow the app to build
  - wget --output-document=$ANDROID_HOME/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
  # move to the archive at ANDROID_HOME
  - pushd $ANDROID_HOME
  - unzip -d cmdline-tools cmdline-tools.zip
  - popd
  - export PATH=$PATH:${ANDROID_HOME}/cmdline-tools/tools/bin/

  # Nothing fancy here, just checking sdkManager version
  - sdkmanager --version

  # use yes to accept all licenses
  - yes | sdkmanager --sdk_root=${ANDROID_HOME} --licenses || true
  - sdkmanager --sdk_root=${ANDROID_HOME} "platforms;android-${ANDROID_COMPILE_SDK}"
  - sdkmanager --sdk_root=${ANDROID_HOME} "platform-tools"
  - sdkmanager --sdk_root=${ANDROID_HOME} "build-tools;${ANDROID_BUILD_TOOLS}"

  # Not necessary, but just for surity
  - chmod +x ./gradlew

  # Using SSH keys with GitLab CI/CD (ssh-private-key)
  # https://docs.gitlab.com/ee/ci/ssh_keys/

  # Install ssh-agent if not already installed, it is required by Docker.
  # (change apt-get to yum if you use an RPM-based image)
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'

  # Run ssh-agent (inside the build environment)
  - eval $(ssh-agent -s)

  # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store.
  # We're using tr to fix line endings which makes ed25519 keys work without extra base64 encoding.
  # https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

  # Create the SSH directory and give it the right permissions
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh

  # Use ssh-keyscan to scan the keys of your private server. Replace gitlab.com with your own domain name.
  # You can copy and repeat that command if you have more than one server to connect to.
  - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

# Defines the paths that Gitlab CI should look for cached artifacts and dependencies.
cache:
  key: ${CI_PROJECT_ID}
  paths:
    - .gradle/

# Basic android and gradle stuff
# Check linting
lintDebug:
  interruptible: true
  stage: build
  script:
    - echo "run lintDebug"
    # - ./gradlew -Pci --console=plain :app:lintDebug -PbuildDir=lint

# Make Project
assembleDebug:
  interruptible: true
  stage: build
  script:
    - echo "Hello, $GITLAB_USER_LOGIN!"
    - echo "The email address associated with your GitLab account is $GITLAB_USER_EMAIL"
    - echo "Your GitLab username is $GITLAB_USER_NAME"
    - echo "Il tuo nome completo Ã¨ $GITLAB_NOME_COGNOME"
    - echo "run assembleDebug"
    # - ./gradlew assembleDebug
  artifacts:
    paths:
      - app/build/outputs/

# Run all tests, if any fails, interrupt the pipeline (fail it)
# testDebug:
  # interruptible: true
  # stage: test
  # script:
    # - echo "run testDebug"
    # - ./gradlew -Pci --console=plain :app:testDebug

release-patch-increment:
  stage: deploy
  artifacts:
    # expire_in: 2 days
    # when: always
    paths:
      - app/build/outputs/
  script:
    - ./gradlew clean
    # - chmod +x ./scripts/download-translations.sh && ./scripts/download-translations.sh
    - ./gradlew incrementVersion -Prelease.scope=patch
    # - ./gradlew uploadToSftpIp1800Release -Prelease.scope=patch
    # - ./gradlew sendEmail
    - ./gradlew pushVersion
  # only:
  #   - /^release\/.*$/
  # when: manual