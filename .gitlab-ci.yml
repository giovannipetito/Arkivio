# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

# In this example, we're using the openjdk:8-jdk Docker image to run our build.
# We define three stages: build, test, and deploy.
# We also set some variables related to the Android SDK, and install the required dependencies and
# tools in the before_script section.
# The build stage runs ./gradlew assembleDebug to build the application.
# The test stage runs ./gradlew testDebug to run unit tests.
# The deploy stage runs your deployment script to deploy the application.
# You'll need to fill in the details of your deployment script here.

# Packages installation before running script
before_script:
  - echo "Before script section"
  # - source ./scripts/config.sh
  - echo "Config script loaded"

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Hello, $GITLAB_USER_LOGIN!"
    - echo "Compiling the code..."
    - export JAVA_HOME=/usr/local/openjdk-11
    - ./gradlew assembleDebug
    - echo "Compile complete."
  #artifacts:
    #paths:
     #- app/build/outputs/

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take some time."
    # - ./gradlew testDebug
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 5 seconds."
    - sleep 5
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "This job deploys something from the $CI_COMMIT_BRANCH branch."
    - echo "Application successfully deployed."