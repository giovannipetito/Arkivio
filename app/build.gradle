plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'com.google.devtools.ksp'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'androidx.navigation.safeargs.kotlin'
    id 'com.google.dagger.hilt.android'
}

android {
    compileSdkVersion 33
    buildToolsVersion "33.0.0"

    defaultConfig {
        applicationId "it.giovanni.arkivio"
        minSdkVersion 31
        targetSdkVersion 33
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            testCoverageEnabled true
            buildConfigField "String", "CREDITS_PREFIX", "\"DEBUG\""
            buildConfigField("String", "BASE_URL", "\"https://reqres.in\"")
            buildConfigField("String", "API_KEY", "\"019bd4d229msh3acba05acc429ddp1d5cd8jsna65c0bb9b162\"")
        }
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("String", "BASE_URL", "\"https://reqres.in\"")
            buildConfigField("String", "API_KEY", "\"019bd4d229msh3acba05acc429ddp1d5cd8jsna65c0bb9b162\"")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }

    kotlin {
        jvmToolchain {
            languageVersion.set(JavaLanguageVersion.of(17))
        }
        // Or shorter:
        // jvmToolchain(17)
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES']
        }
    }

    android {
        buildFeatures {
            dataBinding true
            viewBinding true
        }
    }

    namespace 'it.giovanni.arkivio'

    lint {
        baseline file('lint-baseline.xml')
    }
}

/*
repositories {
    mavenCentral()
}
*/

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "11"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // ArkLib
    implementation 'com.github.giovannipetito:ArkLib:1.0.8'

    // androidx
    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.core:core-role:1.1.0-rc01'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.biometric:biometric:1.1.0'
    implementation 'androidx.work:work-runtime-ktx:2.8.1'
    implementation 'androidx.preference:preference-ktx:1.2.0'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    ksp 'androidx.lifecycle:lifecycle-common-java8:2.6.1'

    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.1'

    // Lifecycle Coroutines
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1'

    // Room
    ksp 'androidx.room:room-compiler:2.5.1'
    implementation 'androidx.room:room-ktx:2.5.1'
    implementation 'androidx.room:room-runtime:2.5.1'
    implementation 'androidx.room:room-rxjava2:2.5.1'
    ksp 'androidx.room:room-compiler:2.5.1'

    // Material
    implementation 'com.google.android.material:material:1.9.0'

    // Dependendcy Injection: Dagger Hilt
    implementation 'com.google.dagger:hilt-android:2.46.1'
    kapt 'com.google.dagger:hilt-android-compiler:2.46.1'

    // Navigation Component
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.3'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.3'

    // Google Mobile Services
    implementation 'com.google.android.gms:play-services-gcm:17.0.0'
    implementation 'com.google.android.gms:play-services-maps:18.1.0'
    implementation 'com.google.android.gms:play-services-auth:20.5.0'
    implementation 'com.google.android.gms:play-services-plus:17.0.0'
    implementation 'com.google.android.gms:play-services-location:21.0.1'
    implementation 'com.google.android.gms:play-services-analytics:18.0.2'

    // Firebase
    implementation 'com.google.firebase:firebase-database-ktx:20.2.1'
    implementation 'com.google.firebase:firebase-analytics-ktx:21.2.2'
    implementation 'com.google.firebase:firebase-messaging-ktx:23.1.2'
    implementation 'com.google.firebase:firebase-crashlytics-ktx:18.3.7'

    // async-http
    implementation 'com.loopj.android:android-async-http:1.4.11'

    // GSON
    implementation 'com.google.code.gson:gson:2.10.1'

    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.9.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.9.0'
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'

    // OkHttp
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.7'
    implementation 'com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.7'

    // Reactive Extensions
    implementation 'io.reactivex.rxjava2:rxjava:2.2.21' // RxJava
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1' // RxAndroid

    // Volley
    implementation 'com.android.volley:volley:1.2.1'

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.15.1'
    ksp 'com.github.bumptech.glide:compiler:4.15.1'

    // Picasso
    implementation 'com.squareup.picasso:picasso:2.71828'

    // Airbnb
    implementation 'com.airbnb.android:lottie:6.0.0' // Lottie
    implementation 'com.airbnb.android:paris:2.0.2' // Paris
    ksp 'com.airbnb.android:paris-processor:2.0.2' // Paris annotations

    // card.io
    implementation 'io.card:android-sdk:5.5.1'

    // Flexbox
    implementation 'com.google.android.flexbox:flexbox:3.0.0'

    // Machine Learning
    implementation 'com.google.mlkit:face-detection:16.1.5'
    implementation 'com.google.android.gms:play-services-mlkit-text-recognition:19.0.0'

    // ExoPlayer
    implementation 'com.google.android.exoplayer:exoplayer-ui:2.18.7'
    implementation 'com.google.android.exoplayer:exoplayer-hls:2.18.7'
    implementation 'com.google.android.exoplayer:exoplayer-dash:2.18.7'
    implementation 'com.google.android.exoplayer:exoplayer-core:2.18.7'

    // Paging Library
    implementation 'androidx.paging:paging-runtime-ktx:3.1.1'

    // Test
    testImplementation 'junit:junit:4.13.2' // Libreria che gestisce gli unit test.
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

// Allow references to generated code
kapt {
    correctErrorTypes true
}

task cleanBuildCache(type: Delete) {
    delete rootProject.buildDir
}

static String getBranchName(git) {
    String ciBranchName = null
    try {
        ciBranchName = System.getenv('CI_BUILD_REF_NAME')
    } catch (ignored) {
        // ignore
    }

    if (ciBranchName == null || ciBranchName.isEmpty()) {
        return git.branch.getCurrent().getName()
    } else {
        return ciBranchName
    }
}

String getLastVersion() {
    String description = "git describe --first-parent".execute().text.trim()
    println "git describe --first-parent = $description"
    if (description.startsWith("v")) {
        description = description.substring(1)
    }

    String tag = description

    if ((description.contains('snapshot') || description.contains('dev')) && description.contains('-')) {
        def matcher = description =~ /^(\d+)\.(\d+)\.(\d+).*/
        Integer major = matcher[0][1].toInteger()
        Integer minor = matcher[0][2].toInteger()
        Integer patch = matcher[0][3].toInteger()

        if (patch > 0) {
            patch--
        } else {
            minor--
        }

        tag = "$major.$minor.$patch"
    } else if (description.contains('-')) {
        tag = description.substring(0, description.indexOf('-'))
    }

    return tagExists(tag) ? tag : "v$tag"
}

boolean tagExists(String tag) {
    try {
        return grgit.describe(commit: tag) != null
    } catch (ignored) {
        return false
    }
}

task incrementVersion(group: 'deployment') {
    doLast {
        final int increment = requireReleaseIncrement()
        final String scope = requireReleaseScope()
        def git = grgit.open(currentDir: project.rootDir)
        // project.incrementVersion(project, git, ARKIVIO_VERSION, scope, increment)
        incrementVersion2(project, git, ARKIVIO_VERSION, scope, increment)
    }
}

static def incrementVersion2(project, git, String versionStr, String scope, int increment) {
    assert ["snapshot", "dev", "patch", "minor", "major"].contains(scope)
    assert increment > 0

    final LazyVersion version = new LazyVersion(versionStr)
    println "currentVersion = $version, scope = ${scope}, increment = ${increment}"

    final String newVersionString

    switch (scope) {
        case "patch":
            version.incrementPatch(increment)
            newVersionString = version.toString()
            break
        case "minor":
            version.incrementMinor(increment)
            newVersionString = version.toString()
            break
        case "major":
            version.incrementMajor(increment)
            newVersionString = version.toString()
            break
        case "dev":
            newVersionString = "${version.toString()}-dev_${project.createHeadCommitId()}"
            break
        case "snapshot":
            newVersionString = "${version.toString()}-snapshot_${project.createHeadCommitId()}"
            break
        default:
            println "nothing to do for scope $scope"
            return
    }

    println "newVersion = $newVersionString"

    def buildFile = project.rootProject.buildFile
    def s = buildFile.getText().replaceFirst("ARKIVIO_VERSION = \"$versionStr\"", "ARKIVIO_VERSION = \"$newVersionString\"")
    buildFile.setText(s)

    if (scope == "snapshot" || scope == "dev") {
        println "No ARKIVIO_VERSION update for Dev/Test releases -> don't commit"
        return
    }

    def branch = null
    try {
        branch = System.getenv('CI_BUILD_REF_NAME')
    } catch (ignored) {
        // ignored
    }

    if (branch != null) {
        // In case of GitLab CI build we have to check out and update the branch to be able to commit
        // and push afterwards to be sure we have no merge conflicts while updating the local branch,
        // we have to delete the local branch and recreate it.
        if (git.branch.list().find { it.name == branch }) {
            git.branch.remove(names: [branch], force: true)
        }
        git.checkout(branch: branch, startPoint: "origin/$branch", createBranch: true)

        // fetch remote tags, and prune local tags that doesn't exist on remote
        "git tag -l | xargs git tag -d && git fetch -t".execute().waitForOrKill(5000)
    }

    git.add(patterns: ['build.gradle'])
    git.commit(message: "Version $newVersionString")
}

class LazyVersion {
    int major
    int minor
    int patch

    LazyVersion(String versionName) {
        def matcher = versionName.trim() =~ /^([0-9]+)\.([0-9]+)\.([0-9]+)$/
        assert matcher.groupCount() == 3
        def group = matcher[0]

        this.major = group[1].toInteger()
        this.minor = group[2].toInteger()
        this.patch = group[3].toInteger()
    }

    LazyVersion(int major, int minor, int patch) {
        this.major = major
        this.minor = minor
        this.patch = patch
    }

    void incrementMajor(int increment) {
        assert increment > 0
        major = major + increment
        minor = 0
        patch = 0
    }

    void incrementMinor(int increment) {
        assert increment > 0
        minor = minor + increment
        patch = 0
    }

    void incrementPatch(int increment) {
        assert increment > 0
        patch = patch + increment
    }

    @Override
    String toString() {
        return "$major.$minor.$patch"
    }
}

// Validate the 'release.increment' property
int requireReleaseIncrement() {
    if (!project.hasProperty('release.increment')) {
        return 1
    }

    final String incrementString = project.getProperty('release.increment')
    try {
        final int increment = incrementString.toInteger()
        if (increment <= 0) {
            throw new GradleException("The property 'release.increment' needs to be set to a positive integer. Provided value = $incrementString")
        }
        return increment
    } catch (ignored) {
        throw new GradleException("The property 'release.increment' needs to be set to a positive integer. Provided value = $incrementString")
    }
}

// Validate the 'release.scope' property
String requireReleaseScope() {
    if (!project.hasProperty('release.scope')) {
        throw new GradleException("The property 'release.scope' has not been set.")
    }

    final String scope = project.getProperty('release.scope')
    final List<String> validScopes = ["snapshot", "dev", "patch", "minor", "major"]
    if (!validScopes.contains(scope)) {
        throw new GradleException("Invalid value '$scope' specified for property 'release.scope'. Valid values are $validScopes.")
    }
    return scope
}

/**
 * Create a new tag for the current version and push it to origin
 */
task pushVersion(group: 'deployment') {
    doLast {
        println "Creating tag for version $ARKIVIO_VERSION"

        final String repositoryUrl = System.getenv('REPOSITORY_URL')
        if (repositoryUrl == null || repositoryUrl.isEmpty()) {
            throw new GradleException("The environment variable 'REPOSITORY_URL' has not been set.")
        }

        def git = grgit.open(currentDir: project.rootDir)
        git.tag.add(name: ARKIVIO_VERSION, message: "Version $ARKIVIO_VERSION. See mail for the changelog")
        git.push(remote: repositoryUrl, refsOrSpecs: ['HEAD'], tags: true)
    }
}